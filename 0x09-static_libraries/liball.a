!<arch>
0-isupper.c/    0           0     0     644     241       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: formal parameter
 * Return: 1(success), 0(fail)
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}

	_putchar('\n');
}

0-memset.c/     0           0     0     644     311       `
#include "main.h"

/**
 * _memset - fills memory with constant byte
 *
 * @s: pointer to string
 * @b: val. to be filled
 * @n: bytes to fill
 *
 * Return: pointer to memory area
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     396       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 *
 * @dest: pointer to string one
 * @src: pointer to string two
 *
 * Return: pointer to the resulting string dest
 */

char *_strcat(char *dest, char *src)
{
	int len, i;

	len = 0;
	while (dest[len] != '\0')
	{
		len++;
	}
	for (i = 0; src[i] != '\0'; i++)
	{
		dest[len] = src[i];
		len++;
	}
	dest[len] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     20        `
int _atoi(char *s);
1-isdigit.c/    0           0     0     644     247       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: formal parameter
 * Return: 1(success), 0(fail)
 */

int _isdigit(int c)
{
	if ((c >= 48) && (c <= 57))
	{
		return (1);
	}
	else
	{
		return (0);
	}

	_putchar('\n');
}

1-memcpy.c/     0           0     0     644     317       `
#include "main.h"

/**
 * _memcpy - cpoies memory area
 *
 * @dest: pointer to destination memory
 * @src: pointer to source memory
 * @n: bytes
 *
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int x;

	x = 0;
	while (x < n)
	{
		dest[x] = src[x];
		x++;
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     365       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 *
 * @dest: pointer
 * @src: pointer
 * @n: bytes
 *
 * Return: string concat
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	j = 0;
	while (dest[j] != '\0')
	{
		j++;
	}

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[j + i] = src[i];
	}

	dest[j + i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     340       `
#include "main.h"
#include <stdio.h>
/**
 * _strchr - locate character in string
 *
 * @s: string to search
 * @c: char to find
 *
 * Return: pointer to first occurance of char
 */

char *_strchr(char *s, char c)
{
	for (; *s; s++)
	{
		if (*s != c)
		{
			s++;
		}
		else
			return (s);
	}
	if (c == '\0')
		return (s);

	return (NULL);
}
2-strlen.c/     0           0     0     644     229       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 *
 * @s: pointer to string
 *
 * Return: length of string
 */

int _strlen(char *s)
{
	int lng = 0;

	while (*s != '\0')
	{
		lng++;
		s++;
	}

	return (lng);
}

2-strncpy.c/    0           0     0     644     349       `
#include "main.h"

/**
 * _strncpy - copies a string
 *
 * @dest: pointer to string one
 * @src: point string two
 * @n: bytes
 *
 * Return: copied string
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	for (; i < n; i++)
	{
		dest[i] = '\0';
	}

	return (dest);
}

3-islower.c/    0           0     0     644     261       `
#include "main.h"

/**
 * _islower - return 1 if character is lower case, else 0
 * @c: formal parameter
 * Return: 1(success); 0(false)
 *
 */
int _islower(int c)
{
	if ((c >= 97) && (c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

3-puts.c/       0           0     0     644     261       `
#include "main.h"

/**
 * _puts -  prints a string, followed by a new line, to stdout
 *
 * @str: string pointer
 *
 * Return: void
 */

void _puts(char *str)
{
	char chr;

	while (*str != '\0')
	{
		chr = *str;
		_putchar(chr);
		str++;
	}

	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     325       `
#include "main.h"

/**
 * _strcmp - compares two strings
 *
 * @s1: string 1
 * @s2: string 2
 *
 * Return: comparison
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] == s2[i] && s1[i] != '\0' && s2[i] != '\0')
	{
		i++;
	}

	if (s1[i] == s2[i])
	{
		return (0);
	}
	else
	{
		return (s1[i] - s2[i]);
	}

}

3-strspn.c/     0           0     0     644     428       `
#include "main.h"

/**
 * _strspn - get length of prefix substring
 *
 * @s: string to check
 * @accept: prefix
 *
 * Return: number of bytes in the initial
 * segment of s which consist only of bytes from accept
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{

		j = 0;
		while (accept[j] != s[i])
		{
			if (accept[j] == '\0')
				return (i);
			j++;
		}

	}

	return (i);
}

4-isalpha.c/    0           0     0     644     281       `
#include "main.h"

/**
 * _isalpha - return 1 if character is a letter, else 0
 * @c: formal parameter
 * Return: 1(success); 0(false)
 *
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

4-strpbrk.c/    0           0     0     644     389       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 *
 * @s: string to examine
 * @accept: bytes
 *
 * Return: pointer to byte in s or NULL
 */

char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j])
		{
			if (s[i] == accept[j])
				return (s + i);
			j++;
		}

		i++;
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     186       `
#include "main.h"

/**
 * _abs - find abs value of a n integer
 *
 * @x: input var
 *
 * Return: absolute value
 *
 */
int _abs(int x)
{
	if (x >= 0)
	{
		return (x);
	}
	return (-x);
}
9-strcpy.c/     0           0     0     644     323       `
#include "main.h"

/**
 * _strcpy - copies the string pointed to by src, including terminating (\0)
 *
 * @dest: buffer
 * @src: string pointer
 *
 * Return: pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int y = 0;

	while (src[y] != '\0')
	{
		dest[y] = src[y];
		y++;
	}
	dest[y] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

